{"version":3,"sources":["Colour.tsx","Components/Lightsaber.tsx","Components/Quote.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Colour","Lightsaber","handleClick","props","className","id","this","colour","onClick","React","Component","Quote","quote","author","href","icon","faJedi","App","state","Green","componentDidMount","fetchQuote","a","fetch","json","then","response","randomQuote","quotes","Math","floor","random","length","hasOwnProperty","setState","Red","Blue","Yellow","catch","error","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sQAAYA,E,6GAAAA,K,cAAAA,E,YAAAA,E,gBAAAA,E,WAAAA,M,eCUCC,EAAb,4MACEC,YAAc,WACZ,EAAKC,MAAMD,eAFf,uDAKI,OACE,yBAAKE,UAAU,cACb,yBACEC,GAAG,mBACHD,UACE,wCAA+CE,KAAKH,MAAMI,SAG9D,uBACEF,GAAG,YACHD,UAAU,mBACVI,QAASF,KAAKJ,mBAhBxB,GAAgCO,IAAMC,W,wBCGzBC,EAAb,uKAEI,OACE,yBAAKP,UAAU,SACb,yBAAKC,GAAG,OAAOD,UAAU,gBAAzB,IACIE,KAAKH,MAAMS,MADf,KAGA,yBACEP,GAAG,SACHD,UAAW,gCAAuCE,KAAKH,MAAMI,QAE5DD,KAAKH,MAAMU,QAEd,uBACER,GAAG,cACHS,KACE,yCACAR,KAAKH,MAAMS,MACX,MACAN,KAAKH,MAAMU,OAEbT,UAAU,gBAEV,kBAAC,IAAD,CAAiBW,KAAMC,YAvBjC,GAA2BP,IAAMC,WCyDlBO,E,4MAxDbC,MAAQ,CACNN,MAAO,GACPC,OAAQ,GACRN,OAAQP,EAAOmB,O,EAGjBC,kBAAoB,WAClB,EAAKC,c,EAGPA,W,sBAAa,sBAAAC,EAAA,sEACUC,MACnB,kJAFS,cAKRC,OACAC,MAAK,SAAAC,GACJ,IAAIC,EACFD,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASE,OAAOI,SAG3DL,EAAYM,eAAe,UAC3BN,EAAYM,eAAe,WAE3B,EAAKC,SAAS,CACZtB,MAAOe,EAAW,MAClBd,OAAQc,EAAW,OACnBpB,OAC4B,gBAA1BoB,EAAW,OACP3B,EAAOmC,IACmB,SAA1BR,EAAW,QACe,iBAA1BA,EAAW,OACX3B,EAAOmB,MACmB,mBAA1BQ,EAAW,OACX3B,EAAOoC,KACPpC,EAAOqC,YAIlBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MA7BnB,2C,uDAiCX,OACE,yBAAKlC,GAAG,aACN,kBAAC,EAAD,CACEE,OAAQD,KAAKY,MAAMX,OACnBK,MAAON,KAAKY,MAAMN,MAClBC,OAAQP,KAAKY,MAAML,SAErB,kBAAC,EAAD,CAAYN,OAAQD,KAAKY,MAAMX,OAAQL,YAAaI,KAAKe,kB,GAnD/CZ,IAAMC,WCDJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMkB,c","file":"static/js/main.c3b17314.chunk.js","sourcesContent":["export enum Colour {\r\n  Green = \"green\",\r\n  Blue = \"blue\",\r\n  Yellow = \"yellow\",\r\n  Red = \"red\"\r\n}\r\n","import \"./lightsaber.css\";\r\n\r\nimport { Colour } from \"../Colour\";\r\nimport React from \"react\";\r\n\r\ninterface LightsaberProps {\r\n  colour: Colour;\r\n  handleClick: () => {};\r\n}\r\n\r\nexport class Lightsaber extends React.Component<LightsaberProps> {\r\n  handleClick = () => {\r\n    this.props.handleClick();\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"lightsaber\">\r\n        <div\r\n          id=\"lightsaber-blade\"\r\n          className={\r\n            \"lightsaber__blade lightsaber__blade\" + \"--\" + this.props.colour\r\n          }\r\n        ></div>\r\n        <a\r\n          id=\"new-quote\"\r\n          className=\"lightsaber__hilt\"\r\n          onClick={this.handleClick}\r\n        ></a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./quote.css\";\r\n\r\nimport { Colour } from \"../Colour\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { faJedi } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface QuoteProps {\r\n  quote: string;\r\n  author: string;\r\n  colour: Colour;\r\n}\r\n\r\nexport class Quote extends React.Component<QuoteProps> {\r\n  render() {\r\n    return (\r\n      <div className=\"quote\">\r\n        <div id=\"text\" className=\"quote__quote\">\r\n          \"{this.props.quote}\"\r\n        </div>\r\n        <div\r\n          id=\"author\"\r\n          className={\"quote__author quote__author\" + \"--\" + this.props.colour}\r\n        >\r\n          {this.props.author}\r\n        </div>\r\n        <a\r\n          id=\"tweet-quote\"\r\n          href={\r\n            \"https://twitter.com/intent/tweet?text=\" +\r\n            this.props.quote +\r\n            \" - \" +\r\n            this.props.author\r\n          }\r\n          className=\"quote__tweet\"\r\n        >\r\n          <FontAwesomeIcon icon={faJedi} />\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./quote-box.css\";\n\nimport { Colour } from \"./Colour\";\nimport { Lightsaber } from \"./Components/Lightsaber\";\nimport { Quote } from \"./Components/Quote\";\nimport React from \"react\";\n\ninterface AppState {\n  quote: string;\n  author: string;\n  colour: Colour;\n}\n\nclass App extends React.Component<{}, AppState> {\n  state = {\n    quote: \"\",\n    author: \"\",\n    colour: Colour.Green\n  };\n\n  componentDidMount = () => {\n    this.fetchQuote();\n  };\n\n  fetchQuote = async () => {\n    const result = await fetch(\n      \"https://gist.githubusercontent.com/spage87/998fc53a890dd14b40fa835975500a8b/raw/6c5868e947076b8aefda9cd4c3d6cd1bf370f58f/star-wars-quotes.json\"\n    );\n    result\n      .json()\n      .then(response => {\n        var randomQuote =\n          response.quotes[Math.floor(Math.random() * response.quotes.length)];\n\n        if (\n          randomQuote.hasOwnProperty(\"quote\") &&\n          randomQuote.hasOwnProperty(\"author\")\n        ) {\n          this.setState({\n            quote: randomQuote[\"quote\"],\n            author: randomQuote[\"author\"],\n            colour:\n              randomQuote[\"author\"] === \"Darth Vader\"\n                ? Colour.Red\n                : randomQuote[\"author\"] === \"Yoda\" ||\n                  randomQuote[\"author\"] === \"Qui-Gon Jinn\"\n                ? Colour.Green\n                : randomQuote[\"author\"] === \"Obi-Wan Kenobi\"\n                ? Colour.Blue\n                : Colour.Yellow\n          });\n        }\n      })\n      .catch(error => console.log(error));\n  };\n\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <Quote\n          colour={this.state.colour}\n          quote={this.state.quote}\n          author={this.state.author}\n        />\n        <Lightsaber colour={this.state.colour} handleClick={this.fetchQuote} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}